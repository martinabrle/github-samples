# Implements a simple CI workflow for words-dotnet API,
# which runs for all pull requests to the main branch,
# resulting in a zip archive with the web-api

name: words-dotnet-ci-cd

on:
  pull_request:
    branches: main
    paths:
      - 'irrelevant-apis/words-dotnet/**'
  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PACKAGE_VERSION: "1.0.0.0"
      PACKAGE_FILE_NAME: "words.zip"
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.103
    - name: Generate packagee name
      #this one is not ideal. Using xmlint or a similar unix command would be preferred....
      #or even using a custom github action from the marketplace. But.... I just want
      #my pipeline to be as fast as possible, because that's it - it's just a single person's
      #little pipeline
      #TODO:check if the package already exists with this version and if yes, add a timestamp
      #     or... perhaps check if manually triggered and add "manual"
      run: |
         declare PACKAGE_VERSION
         declare PACKAGE_FILE_NAME
         grep -Poz '<Version>\s*\K[\s\S]*(?=</Version>)' ./words.csproj > ./version.tmp
         PACKAGE_VERSION="$(tr -d '[:space:],\0,\n,\r,\t' < ./version.tmp)"
         if [[ -z "$PACKAGE_VERSION" ]]
         then
            echo "::error file={words.csproj}::Unable to extract version from words.csproj. Check that Version tag is in there and does not have any spaces in it."
            exit 1
         fi
         PACKAGE_FILE_NAME="words-dotnet-${PACKAGE_VERSION}.zip"
         echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
         echo "PACKAGE_FILE_NAME=$PACKAGE_FILE_NAME" >> $GITHUB_ENV
      shell: bash
      working-directory: 'irrelevant-apis/words-dotnet/'        
    - name: Restore dependencies
      run: dotnet restore --force
      working-directory: 'irrelevant-apis/words-dotnet'
    - name: Build
      run: dotnet build --configuration Release --no-restore --nologo
      working-directory: 'irrelevant-apis/words-dotnet'
    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal --nologo
      working-directory: 'irrelevant-apis/words-dotnet/'
    - name: Publish
      run: dotnet publish ./words.csproj --configuration Release -o ./web-build --no-build --no-self-contained --nologo
      working-directory: 'irrelevant-apis/words-dotnet/'
      #TODO:create a file name from the version number + github variable + (if manual than -manual-timestamp)
    - name: Create Zip Archive
      run: |
         echo "${env.PACKAGE_FILE_NAME}"
         zip -q "${env.PACKAGE_FILE_NAME}" *
      working-directory: 'irrelevant-apis/words-dotnet/web-build'
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: $env.PACKAGE_VERSION
          release_name: $env.PACKAGE_VERSION
          body: "Words API Version ${PACKAGE_VERSION}"
          draft: false
          prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGE_FILE_NAME: ${ env.PACKAGE_FILE_NAME }
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./irrelevant-apis/words-dotnet/web-build/${PACKAGE_FILE_NAME}"
          asset_name: "${PACKAGE_FILE_NAME}"
          asset_content_type: application/zip
    - name: Azure Login
      uses: azure/login@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Deploy to AppService
      uses: azure/webapps-deploy@v2
      with:
         app-name: ${{ secrets.AZURE_APP_NAME }}
         package: irrelevant-apis/words-dotnet/web-build/${{ env.PACKAGE_FILE_NAME }}
    - name: Process errors
      if: ${{ failure() }}
      run: |
          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/issues \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json' \
            --data '{
              "title": "${{ env.scriptname }} has failed: ${{ github.run_id }}",
              "body": "${{ env.scriptname }} has failed: **${{ github.workflow }}**. \n\n Failure in run: _${{ github.run_id }}_."
              }'
  
